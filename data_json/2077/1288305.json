{"link":"1288305","name":"Data Stage 7.5.1 [СУБД]","date":"25-Ноя-08 22:59","author":"Michael_Vetyugov","description":"\nData Stage 7.5.1Год выпуска: 2007\nВерсия: 7.5.1\nРазработчик: Ascential Software\nПлатформа: Windows\nСовместимость с Vista: неизвестно\nЯзык интерфейса: английский + русский\nТаблэтка: ПрисутствуетОписание: Каждое задание DataStage заключается в извлечении данных из одного или нескольких источников, их преобразовании согласно заранее определенным правилам, и помещении в приемник данных. Таким образом, DataStage не требуется никаких промежуточных файлов или других временных источников информации для выполнения операций агрегирования или сортировки. Исключение промежуточных источников избавляет от необходимости выполнения лишних операций ввода/вывода, что является серьезным узким местом, снижающим производительность любой системы. DataStage позволяет одновременно, не используя промежуточных файлов, осуществлять загрузку данных в несколько приемников.\n\nОсобенности\nDataStage – максимальное использование оперативной памяти и уменьшение операций ввода/вывода, что существенно увеличивает производительность системы.\n\nНесколько источниковDataStage позволяет комбинировать записи из различных гетерогенных источников данных. Используя диаграмму потоков данных, разработчик определяет правила объединения строк из различных источников. Источниками данных могут быть плоские файлы или связанные таблицы. DataStage умеет сравнивать плоские файлы и отслеживать и обрабатывать параметры соединения. На выходе DataStage создает скрипт на SQL.Наиболее узким местом при оценке производительности является операция сравнения плоских файлов. Однако DataStage осуществляет потоковое сравнение, что обеспечивает последовательную передачу данных для последующей обработки в процессе преобразования.Несколько приемниковDataStage позволяет записывать информацию одновременно в несколько таблиц. Эти таблицы одновременно могут:Находиться в разных БД или файлахИметь несколько копий в сети\nПринимать данные различными способами (bulk loaders, SQL, ввод/вывод в плоский файл и пр.)\nСтроки данных выборочно разбиваются и дублируются, когда разработчик описывает потоки данных. DataStage может дублировать строки и преобразовывать их различными путями, выбирать строки в соответствии со значениями в колонках, разбивать строки по горизонтали и отправлять различные части в несколько приемников. Более того, DataStage может одновременно выполнять несколько заданий, обращающихся к одному и тому же источнику данных.Сортировки и агрегированиеОперации сортировки и агрегирования также выполняются без обращения к дисковой памяти. DataStage осуществляет их в процессе преобразования, не используя промежуточных источников и операторов SQL. DataStage позволяет проводить сортировку в любой точке на пути преобразования. Сортировка может быть выполнена до или после вычислений, агрегирования и, в случае необходимости, проведена по нескольким путям преобразования, если осуществляется запись в несколько приемников.\nНапример, агрегирование может следовать непосредственно после генерации нового ключа или объединения перед добавлением информации в БД. Разработчик может настраивать свойства сортировок с целью максимального использования доступной оперативной памяти. Если данные уже отсортированы, на стадии агрегирования строки будут доставляться в приемник, после завершения каждой группы агрегации. Пока доступных ресурсов достаточно, операции сортировки и агрегирования выполняются в памяти. Это сокращает физический ввод/вывод и помогает обеспечить завершение заданий DataStage за наименьший возможный промежуток времени.Связанные преобразованияDataStage осуществляет операции по преобразованию в памяти по мере прохождения строк на пути преобразований. Ядро DataStage использует всю доступную оперативную память, чтобы сократить операции ввода/вывода и обеспечить быстрое выполнение заданий. Фаза преобразования данных обеспечивает пользователя возможностью графического отображения столбец-в-столбец, создавать арифметические и строковые выражения для описания манипуляций с данными и применять встроенные или пользовательские функции.\nИногда необходимо включать зависимые или \"связанные\" преобразования в процесс перемещения данных. Результаты вычислений промежуточной колонки часто используются повторно в последующих операторах. Ядро DataStage обрабатывает такие связанные преобразования как регулярные подпрограммы. Данные не записываются на диск и поток строк непрерывно следует через одну или несколько стадий преобразования. DataStage обеспечивает непрерывность потока данных и увеличение общей производительности. Дополнительно, это позволяет разработчику графически связывать преобразования, создавая понятный всем порядок выполнения операций.Хэш-таблицы в памятиВ сервер DataStage встроена возможность автоматического создания и загрузки динамических хэш-таблиц. Хэш-таблицы существенно увеличивают эффективность поиска данных lookup). Операция поиска используется для сравнения ключей и получения измерений и мер (цены, описания, и т.д.), проверки данных на предмет существования ключа в пределах зарезервированного списка. Информация в хэш-таблицы загружается непосредственно из источника данных, а затем с помощью опции \"pre-load to memory\", обеспечивается максимальная производительность. Хэш-таблицы могут быть загружены непосредственно во время выполнения задания где требуется поиск или раньше и сохранены для использования в дальнейшем. Увеличение производительности при интенсивных дисковых операциях очень существенно, особенно когда имеются множество различных полей требующих сравнения. Другие инструментальные средства обычно выполняют просмотр, посылая инструкции PREPARED SQL в реляционную базу данных, что является осуществимым, но утомительным механизмом.Именованные программные каналыИспользование именованных каналов упрощает разработчику задачу осуществить задачу обмена данными между заданиями и связи с другими приложениями. Механизм именованных каналов, имеющийся во многих операционных системах, позволяет сделать прозрачным перемещения данных через память между процессами приложения ETL. Именованные каналы – очень мощный механизм, но иногда его достаточно сложно использовать. В DataStage разработчик просто указывает на необходимость использования канала, а DataStage обеспечит их корректное использование. Более того, DataStage может непрерывно распределять данные через именованные каналы, поддерживая другие инструменты, такие как специализированные загрузчики больших массивов данных (bulk loaders). Большие задания могут быть разбиты на ряд более простых, или могут быть распределены среди разработчиков хранилища данных. При выполнении, индивидуальные задания работают в параллельных, но интегрированных процессах, передавая друг другу данные с помощью именованных каналов, что оптимизирует машинные ресурсы и сокращает время на проектирование и разработку хранилища.ПараллелизмЯдро DataStage использует многопроцессорную среду для автоматического распределения потока независимых заданий на несколько процессов. Эта особенность DataStage гарантирует наиболее эффективное использование доступных ресурсов и увеличивает скорость полной обработки данных. Сервер DataStage анализирует задания в начале их выполнения, выделяя зависимые операции и отдельно помечая независимые потоки данных. Для каждого задания, ядро DataStage будет порождать несколько параллельных процессов. Эти процессы будут запускаться одновременно и разделятся среди множества процессоров на многопроцессорной вычислительной машине. На рисунке приведен пример разбиения одного задания на 6 подзаданий. Процессы a и c запускаются одновременно; процесс b ожидает завершения загрузки таблицы. Процессы d, e, и f также запускаются одновременно, после того как будет полностью загружена первая таблица.Native-поддержка популярных реляционных системDataStage уменьшает нагрузку на сеть за счет использования для связи с каждой СУБД ее native-интерфейсов. Реляционные базы данных являются ключевым компонентом почти каждой системы поддержки принятия решения. Обычно, они используются как хранилища или витрины данных. Взаимодействие с этими СУБД требует использования SQL для извлечения данных из источников данных и для записи результатов в приемники данных. Даже при том, что загрузка больших массивов данных (bulk loaders) обычно обеспечивает высокую производительность, процедура извлечения/загрузки может нуждаться в использовании динамического SQL для последовательной записи, обновления, или других сложных процессов над строками. Инструменты в области извлечения/преобразования данных должны поддерживать наиболее эффективный способ для связи с этими базами данных и обеспечивать эту поддержку на всем обширном множестве конфигураций. Использование ODBC является наиболее простым механизмом для обеспечения данного типа взаимодействия, но не может обеспечивать высокую производительность.\nDataStage позволяет использовать как ODBC- так и native-драйверы для наиболее популярных СУБД. Везде, где возможно, DataStage использует специальные настройки, предлагаемые поставщиком СУБД и освобождает снижает нагрузку на разработчика по поддержкой дополнительных уровней программного обеспечения.Загрузчик больших массивов данных (Bulk Loaders)Программное обеспечение Ascential реализует поддержку технологий высокоскоростной загрузки данных, предлагаемых партнерами Ascential и другими ведущими поставщиками в индустрии хранилищ данных. Загрузчик больших массивов данных или утилиты \"быстрой загрузки\" обеспечивают высокоскоростную вставку строк в реляционную таблицу, обычно отключая ведение журналов (logging) и другие служебные действия с транзакциями, реализуемых в регистрирующих приложениях. DataStage поддерживает широкое разнообразие таких утилит загрузки больших массивов, непосредственно вызывая API загрузчиков массивов СУБД или генерируя файл контроля и соответствия данных при выполнении пакетного ввода. Разработчики просто присоединяют иконку Bulk Load Stage к их заданиям и потом заполняют параметры настроек выполнения, которые соответствуют их специфической среде. DataStage управляет записью и перезаписью контрольных файлов. В случае поддержки API загрузки массивов, DataStage заботится о преобразовании данных, буферизации и всех деталях выдачи запросов нижнего уровня.FTPДля перемещения плоских файлов между компьютерами в корпоративной сети этап подготовка для загрузки в витрину данных или хранилище данных часто включает использование протокола передачи файлов (FTP). Этот процесс обычно поддерживается программами-оболочками и другими, написанными пользователем, скриптами и требует, чтобы на машине-приемнике имелось достаточное дисковое пространство для сохранения копии файла. При выполнении этого процесса, не эффективно используется доступная память.\nDataStage обеспечивает поддержку FTP в стадии, которая использует протокол передачи файлов, но пропускается время, потребляя шаг ввода/вывода необходимый при выполнении автономной команды программы. Пока блоки данных посылаются через сеть, DataStage выдвигает предобработанные строки, перемещая их непосредственно в процесс преобразования. Также, DataStage может использовать свою поддержку FTP, чтобы записать плоские файлы в удаленные приемники. Поддержка DataStage FTP обеспечивает большую экономию времени, поскольку никакой дополнительный дисковый ввод/вывод не осуществляется.Управление изменениями в данных (Change Data Capture)Обработка изменений в данных критична к производительности приложения по извлечению и преобразованию данных. Системы поддержки принятия решений требуют периодического обновления данных. Время загрузки, требуемое для обновления, определяется такими переменными как:- частота обновления;\n- доступность приемников данных;\n- способность доступа к источникам;\n- ожидаемый объем измененных данных.Однако существуют технологии, позволяющие изменять данные в хранилище непосредственно при обнаружении изменения данных в источнике.\nСетевые издержки и долгое время загрузки недопустимы. Поддержка DataStage \"захвата изменений данных\" (Change Data Capture) уменьшает время загрузки, требуемое для обновления витрин и хранилищ данных.\n\n\nСкриншот\n\n\n  \n Набор в группу «Хранители» - Помогите сохранить редкие раздачи  ","magnet_link":"magnet:?xt=urn:btih:760F634C580B353A7EBFB30F46DC5D9B9757ACCF&tr=http%3A%2F%2Fbt2.t-ru.org%2Fann%3Fmagnet&dn=Data%20Stage%207.5.1%20%5B%D0%A1%D0%A3%D0%91%D0%94%5D","torrent_link":"dl.php?t=1288305","thanked_list":[{"id":"22783523","name":"Sagitulyd ","data":"(22-Июл-20)"},{"id":"9495487","name":"LAZ-AREV ","data":"(21-Апр-17)"},{"id":"40382408","name":"cybercyborg ","data":"(06-Май-16)"},{"id":"22444828","name":"stifanirox ","data":"(09-Мар-15)"},{"id":"0","name":"Гость","data":"(12-Фев-15)"},{"id":"12266307","name":"VitalikusJazz ","data":"(03-Дек-13)"},{"id":"18149402","name":"zerkalovich ","data":"(16-Апр-13)"},{"id":"3665646","name":"InReD ","data":"(09-Май-11)"},{"id":"21077","name":"corung ","data":"(17-Мар-11)"},{"id":"9188768","name":"blockmak ","data":"(14-Окт-10)"},{"id":"14958616","name":"zagorny ","data":"(14-Апр-10)"},{"id":"0","name":"Гость","data":"(11-Ноя-09)"},{"id":"7074847","name":"ogurets_agressive ","data":"(08-Ноя-09)"},{"id":"4285150","name":"pym933 ","data":"(30-Окт-09)"},{"id":"7877533","name":"basjust ","data":"(19-Янв-09)"},{"id":"0","name":"Гость","data":"(27-Дек-08)"}]}