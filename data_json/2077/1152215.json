{"link":"1152215","name":"Sybase ASE 12.5.1 (Server + Client + Docs + Instrument) [СУБД]","date":"06-Окт-08 15:14","author":"ntr123","description":"\nSybase ASE 12.5.1 (Server + Client + Docs + Instrument)Год выпуска: 2004\nВерсия: 12.5.1/EBF 11665 ESD#2/P/NT (IX86)/OS 4.0/ase1251/1838/32-bit/OPT/Fri Feb 20 04:11:31 2004\nРазработчик: Sybase\nПлатформа: Windows\nСовместимость с Vista: Полная\nСистемные требования: СЕРВЕР, Проверена на системах:\nMicrosoft Windows 2000 Server/Advanced Server\nMicrosoft Windows 2003 Server Standard/Enterprise 32 bit\nMicrosoft Windows 2008 Server Enterprise Service Pack 1Процессор:1x Intel Pentium IV\nОперативная память: 1 Гб\nМесто на жестком диске: Системный раздел: 0,5 Гб/Раздел данных минимум: 2 ГбКЛИЕНТ:\nОперационная система: Microsoft Windows 2000 Professional или Microsoft Windows XP SP1 32 Bit\nПроцессор 1x Intel Pentium III\nОперативная память 128 Мб\nМесто на жестком диске 500 Мб\nЯзык интерфейса: английский + русский\nТаблэтка: Присутствует\nОписание: Adaptive Server Enterprise (ASE) - мощная СУБД масштаба предприятия, являющаяся надежной платформой для критически-важных бизнес приложений. Sybase ASE традиционно используется в наиболее ответственных и требовательных к производительности системах, сохраняя при этом простоту в обслуживаниии и самую низкую среди \"больших\" СУБД совокупную стоимость владения (TCO).Sybase Inc. представила Sybase Adaptive Server Enterprise 12.5.1 - сервер нового поколения, специально спроектированный для управления большими и сверхбольшим базами данных, в условиях постоянно увеличивающегося потока транзакций, при этом сохранив качество экономически эффективной платформы для управления данными.Приложен инструмент: Embarkadero DBArtisan 7.0.0 + ключи\nРекомендуется для выполнения скриптов администрирования и написания хранимых процедурПриложен инструмент: PowerBuilder 6.5.1 работает и на Висте. (при установке некоторое время висит, но потом все ставится)\nРекомендуется для написания Клиент Серверных приложений с родной базой (очень простой интерфейс в отличие от следующих версий)\n\nДополнительная информация\nЧтобы сервер Sybase ASE Server 12.5.1 был на любое количество конектов нужно:\nкопировать файл Disk1\\#Crack\\license.dat после создания инсталлятором файловой структуры, до создания экземпляра сервера...\n\n\nСоздание и настройка базы данных\n/* Пример: создадим базу данных my_base размером 52 ГБ = (50 ГБ data + 2 ГБ Log) в BDArtisan */\n/* для этого сделаем два девайса my_base1 и my_base2 по 25 Gb каждый, мах SIZE 32 Gb - 16 777 216 */USE master\ngo\nDISK INIT\nNAME='my_base1',\nPHYSNAME='c:\\sybase\\data\\my_base1.dat',\nVDEVNO=2,\nSIZE=12800000,\nVSTART=0,\nCNTRLTYPE=0\ngo\nEXEC sp_diskdefault 'my_base1',defaultoff\ngoUSE master\ngo\nDISK INIT\nNAME='my_base2',\nPHYSNAME='c:\\sybase\\data\\my_base2.dat',\nVDEVNO=3,\nSIZE=12800000,\nVSTART=0,\nCNTRLTYPE=0\ngo\nEXEC sp_diskdefault 'my_base2',defaultoff\ngo/* создадим девайс my_base_log лог базы размером 2Gb */USE master\ngo\nDISK INIT\nNAME='my_base_log',\nPHYSNAME='c:\\sybase\\data\\my_base_log.dat',\nVDEVNO=4,\nSIZE=1024000,\nVSTART=0,\nCNTRLTYPE=0\ngo\nEXEC sp_diskdefault 'my_base_log',defaultoff\ngo/* Итоговое создание базы my_base размером 52 Gb */USE master\ngo\nCREATE DATABASE my_base\nONmy_base1=25000, my_base2=25000\nLOG ONmy_base_log=2000\ngo\nUSE masterEXEC sp_dboption 'my_base','select into/bulkcopy/pllsort',true\ngoEXEC sp_dboption 'my_base','trunc log on chkpt',true\ngo\nUSE my_base\ngo\nCHECKPOINT\ngo/* Далее мы увеличим размер базы tempdb до 4 ГБ */\n/* создаем девайс 4 Gb */USE master\ngo\nDISK INIT\nNAME='temp_db',\nPHYSNAME='c:\\sybase\\data\\temp_db.dat',\nVDEVNO=5,\nSIZE=2048000,\nVSTART=0,\nCNTRLTYPE=0\ngo\nEXEC sp_diskdefault 'temp_db',defaultoff\ngo/* увеличиваем размер базы tempdb */USE master\ngo\nALTER DATABASE tempdb\nONtemp_db=4000\ngo/* Настройки производительности */\n/* Почему нужно перенастраивать сервер? */Так как Sybasе Enterprise Server 12.5.1 по умолчанию работает почти на любом железе. Поэтому, установки по умолчанию не будут использовать ресурсы компьютера полностью. Даже для средней персоналки, желательно перенастроить Sybasе сервер, как описано ниже. Примеры приведены для трех вариантов ОЗУ: 4Gb, 2Gb, и 512Kb.\nБыл взят сервер: Xeon(TM) CPU 2.80 ГГц, - два процессора ОЗУ 4.00 ГБ (чтобы эта память была доступна операционной системе, в файле c:\\boot.ini нужно дописать в конце последней строки '/3Gb' .....WINDOWS=\"Windows Server 2003, Enterprise\" /fastdetect /3Gb )\nОперационная система сервера: Microsoft Windows Server 2003/* Пример распределения памяти для ОЗУ 4.00 ГБ: */EXEC sp_configure 'max memory', 1200000 -- доступная память для SQL сервера/* Пример распределения памяти для ОЗУ 2.00 ГБ: */EXEC sp_configure 'max memory', 750000 -- доступная память для SQL сервера/* Далее для ОЗУ 4.00 ГБ и для ОЗУ 2.00 ГБ одинаково */-- Следующую операцию можно делать только на серверах, где есть файл c:\\boot.ini на всех остальных операционках ее нужно пропустить,\n-- т.е на Vista Home premium операцию allocate max shared memory устанавливать в 1 не стоит, сервер после перезапуска не запустится....\n-- Если сервер по какой то причине не стартонул, то вернуть предыдущую конфигурацию можно из файлов c:\\sybase\\server_name.??? переименовав последний в c:\\sybase\\server_name.cfg\nEXEC sp_configure 'allocate max shared memory', 1 -- SQL сервер забирает всю память при стартеEXEC sp_configure \"procedure cache size\", 35000 -- размер процедурного кэша\nEXEC sp_cacheconfig 'my_base cache','450.000M',mixed,strict -- выделяем кэш для базы my_base\nEXEC sp_cacheconfig 'tempdb cache','450.000M',mixed,strict -- выделяем кэш для базы tempdb (для 4ГБ можно установить до 770.000M)\nEXEC sp_configure 'user log cache size',16392 -- увеличиваем лог/* Пример распределения памяти для ОЗУ 512 Mb: */EXEC sp_configure 'max memory', 140000 -- доступная память для SQL сервера\nEXEC sp_configure 'allocate max shared memory', 1 -- SQL сервер забирает всю память при старте\nEXEC sp_configure \"procedure cache size\", 32000 -- размер процедурного кэша\nEXEC sp_cacheconfig 'my_base cache','96.000M',mixed,strict -- выделяем кэш для базы my_base\nEXEC sp_cacheconfig 'tempdb cache','50.000M',mixed,strict -- выделяем кэш для базы tempdb\nEXEC sp_configure 'user log cache size',16392 -- увеличиваем лог/* Руссифицируем сервер */EXEC sp_configure 'default character set', 1, bin_iso_1\n-- Обязательно установить в Редакторе рееста программа RegEdit\n-- HKEY_LOCAL_MACHINE\\SOFTWARE\\SYBASE\\Server\\имя_бэкап_сервера_BS\\Parameters\\Arg5 ставим вместо -Jcp850 значение -Jiso_1 (Не потеряйте знак '-')\n-- Сейчас перезапускаем Sybase SQL сервер через Службы (два раза т.к. с первого раза он не стартует)/* После перезапуска распределяем память */EXEC sp_bindcache 'my_base cache','my_base' -- указываем кэш базе My Base\nEXEC sp_bindcache 'tempdb cache','tempdb' -- указываем кэш базе tempdb/* Дополнительные настройки сервера */EXEC sp_configure 'number of open index', 2000 -- число отктытых индексов\nEXEC sp_configure 'number of open objects', 3000 -- чистло ткрытых объектов\nEXEC sp_configure 'number of user connections', 150 -- число одновременных пользователей\nEXEC sp_configure 'number of locks', 20000 -- число одновременных блокировок\nEXEC sp_configure 'license information', 0 -- отключаем сообщение о лицензиях/* Если сервер имеет несколько физических процессоров */EXEC sp_configure 'number of engines at startup', 2 -- число физических процессоров\nEXEC sp_configure 'max online engines', 2 -- число физических процессоров используемых SQL сервером.\n-- Параметры 'number of engines at startup' и 'max online engines' связаны между собой и должны быть равны.\n\n\nSQL скрипт для связки PowerBuilder 6.5.1 и ASE 12.5.1\n/* Этот скрипт нужен, чтобы из под PowerBuilder 6.5.1 были доступны таблицы на ASE 12.5.1 */\n/* Скрипт нужно скомпилировать на базе sybsystemprocs например из под DBArtisan(а) */\nIF OBJECT_ID('dbo.sp_pb60column') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60column\nIF OBJECT_ID('dbo.sp_pb60column') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60column >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60column >>>'\nEND\ngo\ncreate proc sp_pb60column\n@id int\nas\ndeclare @text varchar(255)\nselect @text = null\nselect c.colid, c.status, c.type, c.length, c.name, c.usertype, c.prec, c.scale, @text\nfrom dbo.syscolumns c where c.id = @id and c.cdefault = 0\nunion\nselect c.colid, c.status, c.type, c.length, c.name, c.usertype, c.prec, c.scale, m.text\nfrom dbo.syscolumns c, dbo.syscomments m where c.id = @id\nand c.cdefault = m.id and m.colid = 1\norder by c.colid\ngo\nIF OBJECT_ID('dbo.sp_pb60column') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60column >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60column >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60column TO public\ngoIF OBJECT_ID('dbo.sp_pb60db') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60db\nIF OBJECT_ID('dbo.sp_pb60db') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60db >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60db >>>'\n\nEND\ngo\ncreate proc sp_pb60db as\nselect name from master.dbo.sysdatabases\ngo\nIF OBJECT_ID('dbo.sp_pb60db') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60db >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60db >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60db TO public\ngoIF OBJECT_ID('dbo.sp_pb60extcat') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60extcat\nIF OBJECT_ID('dbo.sp_pb60extcat') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60extcat >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60extcat >>>'\n\nEND\ngo\ncreate procedure sp_pb60extcat\nas\ndeclare @tbl char(1)\ndeclare @col char(1)\ndeclare @fmt char(1)\ndeclare @vld char(1)\ndeclare @edt char(1)\ndeclare @tblproc char(1)\ndeclare @colproc char(1)\ndeclare @fmtproc char(1)\ndeclare @vldproc char(1)\ndeclare @edtproc char(1)\ndeclare @existbuff char(10)\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pbcattbl'))\nselect @tbl = 'Y'\nelse\nselect @tbl = 'N'\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pbcatcol'))\nselect @col = 'Y'\nelse\nselect @col = 'N'\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pbcatfmt'))\nselect @fmt = 'Y'\nelse\nselect @fmt = 'N'\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pbcatvld'))\nselect @vld = 'Y'\n\nelse\nselect @vld = 'N'\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pbcatedt'))\nselect @edt = 'Y'\nelse\nselect @edt = 'N'\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pb_cattbl'))\nselect @tblproc = 'Y'\nelse\nselect @tblproc = 'N'\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pb_catcol'))\nselect @colproc = 'Y'\n\nelse\nselect @colproc = 'N'\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pb_catfmt'))\nselect @fmtproc = 'Y'\nelse\nselect @fmtproc = 'N'\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pb_catvld'))\nselect @vldproc = 'Y'\n\nelse\nselect @vldproc = 'N'\nif exists\n(select id from dbo.sysobjects where id = object_id('dbo.pb_catedt'))\nselect @edtproc = 'Y'\n\nelse\nselect @edtproc = 'N'\nselect @existbuff = @tbl + @col + @fmt + @vld + @edt +@tblproc + @colproc + @fmtproc +@vldproc + @edtproc\nselect @existbuff\ngo\nIF OBJECT_ID('dbo.sp_pb60extcat') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60extcat >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60extcat >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60extcat TO public\ngoIF OBJECT_ID('dbo.sp_pb60fktable') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60fktable\nIF OBJECT_ID('dbo.sp_pb60fktable') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60fktable >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60fktable >>>'\n\nEND\ngo\ncreate procedure sp_pb60fktable\n@objname varchar(61) = null\nas\ndeclare @objid int\ndeclare @isolevel int /* ptrack 325579 isolation level */if (@objname is null)\nreturn (1)\nselect @objid = object_id(@objname)\n/* ptrack 325579 override isolation level 0 default */\nselect @isolevel = @@isolation\nif @isolevel = 0\nbegin\nset transaction isolation level 1\nendselect o.name, o.id, o.type, o.uid, user_name(o.uid)\nfrom dbo.sysobjects o, dbo.sysreferences r\nwhere r.reftabid = @objid and r.tableid = o.idif @isolevel = 0\nbegin\nset transaction isolation level 0\nend\ngo\nIF OBJECT_ID('dbo.sp_pb60fktable') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60fktable >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60fktable >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60fktable TO public\ngoIF OBJECT_ID('dbo.sp_pb60foreignkey') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60foreignkey\nIF OBJECT_ID('dbo.sp_pb60foreignkey') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60foreignkey >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60foreignkey >>>'\n\nEND\ngo\ncreate proc sp_pb60foreignkey\n@objname varchar(92)\nas\ndeclare @objid int /* the object id of the fk table */\ndeclare @keyname varchar(30) /* name of foreign key */\ndeclare @constid int /* the constraint id in sysconstraints */\ndeclare @keycnt smallint /* number of columns in pk */\ndeclare @stat int\ndeclare @isolevel int /* ptrack 325579 isolation level */select @objid = object_id(@objname)\nif (@objid is null)\nbegin\nreturn (1)\nend\nselect @stat = sysstat2\nfrom dbo.sysobjects\nwhere id = @objid and (sysstat2 & 2) = 2\nif (@stat is null)\nbegin\nreturn (1)\nend/* Now I know this table has one or more foreign keys. */\n/* ptrack 325579 override isolation level 0 default */\nselect @isolevel = @@isolation\nif @isolevel = 0\nbegin\nset transaction isolation level 1\nendselect o1.name, r.keycnt, o2.name, user_name(o2.uid),\nr.fokey1, r.fokey2, r.fokey3, r.fokey4, r.fokey5, r.fokey6,\nr.fokey7, r.fokey8, r.fokey9, r.fokey10, r.fokey11, r.fokey12,\nr.fokey13, r.fokey14, r.fokey15, r.fokey16\nfrom dbo.sysconstraints c, dbo.sysobjects o1,\ndbo.sysreferences r, dbo.sysobjects o2\nwhere c.tableid = @objid and\nc.status = 64 and\nc.constrid = o1.id and\no1.type = 'RI' and\nc.constrid = r.constrid and\nr.reftabid = o2.id\nif @isolevel = 0\nbegin\nset transaction isolation level 0\nend\ngo\nIF OBJECT_ID('dbo.sp_pb60foreignkey') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60foreignkey >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60foreignkey >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60foreignkey TO public\ngoIF OBJECT_ID('dbo.sp_pb60index') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60index\nIF OBJECT_ID('dbo.sp_pb60index') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60index >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60index >>>'\n\nEND\ngo\ncreate procedure sp_pb60index\n@objname varchar(92) /* the table to check for indexes */\nas\ndeclare @objid int /* the object id of the table */\ndeclare @indid int /* the index id of an index */\ndeclare @key1 varchar(30) /* first key */\ndeclare @key2 varchar(30) /* second key */\ndeclare @key3 varchar(30) /* third key */\ndeclare @key4 varchar(30) /* fourth key */\ndeclare @key5 varchar(30) /* ... */\ndeclare @key6 varchar(30)\ndeclare @key7 varchar(30)\ndeclare @key8 varchar(30)\ndeclare @key9 varchar(30) /* ... */\ndeclare @key10 varchar(30)\ndeclare @key11 varchar(30)\ndeclare @key12 varchar(30)\ndeclare @key13 varchar(30) /* ... */\ndeclare @key14 varchar(30)\ndeclare @key15 varchar(30)\ndeclare @key16 varchar(30)declare @unique smallint /* index is unique */\ndeclare @clustered smallint /* index is clustered */\ndeclare @isolevel int /* ptrack 325579 isolation level */\n/*\n** Check to see the the table exists and initialize @objid.\n*/\nselect @objid = object_id(@objname)/*\n** Table doesn't exist so return.\n*/\nif @objid is null\nbegin\nreturn\nend/*\n** See if the object has any indexes.\n** Since there may be more than one entry in sysindexes for the object,\n** this select will set @indid to the index id of the first index.\n*/\nselect @indid = min(indid)\nfrom sysindexes\nwhere id = @objid\nand indid > 0\nand indid < 255\n\n\n/*\n** If no indexes, return.\n*/\nif @indid is null\nbegin\nreturn\nend/* ptrack 325579 override isolation level 0 default */\nselect @isolevel = @@isolation\nif @isolevel = 0\nbegin\nset transaction isolation level 1\nend/*\n** Now check out each index, figure out it's type and keys and\n** save the info in a temporary table that we'll print out at the end.\n*/\ncreate table #spindtab\n(\nindex_name varchar(30),\nindex_num int,\nindex_key1 varchar(30) null,\nindex_key2 varchar(30) null,\nindex_key3 varchar(30) null,\nindex_key4 varchar(30) null,\nindex_key5 varchar(30) null,\nindex_key6 varchar(30) null,\nindex_key7 varchar(30) null,\nindex_key8 varchar(30) null,\nindex_key9 varchar(30) null,\nindex_key10 varchar(30) null,\nindex_key11 varchar(30) null,\nindex_key12 varchar(30) null,\nindex_key13 varchar(30) null,\nindex_key14 varchar(30) null,\nindex_key15 varchar(30) null,\nindex_key16 varchar(30) null,\nindex_unique smallint,\nindex_clustered smallint,\nindex_status smallint,\nindex_status2 int\n)while @indid != null\nbegin\n/*\n** First we'll figure out what the keys are.\n*/\ndeclare @i int\ndeclare @thiskey varchar(30)\ndeclare @lastindid intselect @i = 1set nocount onwhile @i <= 16\nbegin\nselect @thiskey = index_col(@objname, @indid, @i)if @thiskey = null\nbegin\ngoto keysdone\nendif @i = 1\nbegin\nselect @key1 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 2\nbegin\nselect @key2 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 3\nbegin\nselect @key3 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 4\nbegin\nselect @key4 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 5\nbegin\nselect @key5 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 6\nbegin\nselect @key6 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 7\nbegin\nselect @key7 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 8\nbegin\nselect @key8 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 9\nbegin\nselect @key9 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 10\nbegin\nselect @key10 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 11\nbegin\nselect @key11 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 12\nbegin\nselect @key12 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 13\nbegin\nselect @key13 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 14\nbegin\nselect @key14 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 15\nbegin\nselect @key15 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 16\nbegin\nselect @key16 = index_col(@objname, @indid, @i)\nend/*\n** Increment @i so it will check for the next key.\n*/\nselect @i = @i + 1end\n/*\n** When we get here we now have all the keys.\n*/\nkeysdone:\nset nocount off/*\n** Figure out if it's a clustered or nonclustered index.\n*/\nif @indid = 1\nselect @clustered = 1if @indid > 1\nselect @clustered = 0/*\n** Now we'll check out the status bits for this index\n*//*\n** See if the index is unique (0x02).\n*/\nif exists (select *\nfrom master.dbo.spt_values v, sysindexes i\nwhere i.status & v.number = v.number\nand v.type = 'I'\nand v.number = 2\nand i.id = @objid\nand i.indid = @indid)\nselect @unique = 1\nelse\nselect @unique = 0/*\n** Now we have all the needed info for the index so we'll add\n** the goods to the temporary table.\n*/\ninsert into #spindtab\nselect name, @i - 1, @key1, @key2, @key3, @key4,\n@key5, @key6, @key7, @key8, @key9,\n@key10, @key11, @key12, @key13, @key14,\n@key15, @key16, @unique, @clustered, status, status2\nfrom sysindexes\nwhere id = @objid\nand indid = @indid\n/*\n** Now move @indid to the next index.\n*/\nselect @lastindid = @indid\nselect @indid = null\nselect @indid = min(indid)\nfrom sysindexes\nwhere id = @objid\nand indid > @lastindid\nand indid < 255\nend/*\n** Now print out the contents of the temporary index table.\n*/\nselect index_name, index_num, index_key1, index_key2,\nindex_key3, index_key4, index_key5, index_key6,\nindex_key7, index_key8, index_key9, index_key10,\nindex_key11, index_key12, index_key13, index_key14,\nindex_key15, index_key16, index_unique, index_clustered,\nindex_status, index_status2\nfrom #spindtabdrop table #spindtab\n/* ptrack 325579 reset isolation 0 after we're done with procedure */\nif @isolevel = 0\nbegin\nset transaction isolation level 0\nend\ngo\nIF OBJECT_ID('dbo.sp_pb60index') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60index >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60index >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60index TO public\ngoIF OBJECT_ID('dbo.sp_pb60pkcheck') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60pkcheck\nIF OBJECT_ID('dbo.sp_pb60pkcheck') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60pkcheck >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60pkcheck >>>'\nEND\ngo\ncreate procedure sp_pb60pkcheck\n@objname varchar(92)\nas\ndeclare @stat int\nselect @stat = sysstat2\nfrom dbo.sysobjects\nwhere id = object_id(@objname) and\n(sysstat2 & 8) = 8\nif (@stat is null)\nbegin\nreturn (0)\nend\nelse\nbegin\nreturn (1)\nend\ngo\nIF OBJECT_ID('dbo.sp_pb60pkcheck') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60pkcheck >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60pkcheck >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60pkcheck TO public\ngoIF OBJECT_ID('dbo.sp_pb60primarykey') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60primarykey\nIF OBJECT_ID('dbo.sp_pb60primarykey') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60primarykey >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60primarykey >>>'\nEND\ngo\ncreate proc sp_pb60primarykey\n@objname varchar(92)\nas\ndeclare @objid int /* the object id of the table */\ndeclare @keyname varchar(30) /* name of primary key */\ndeclare @indid int /* the index id of the index */\ndeclare @keycnt smallint /* number of columns in pk */select @objid = object_id(@objname)\nif @objid is null\nbegin\nreturn 1\nendselect @keyname = name,\n@indid = indid,\n@keycnt = keycnt\nfrom dbo.sysindexes\nwhere id = object_id(@objname) and\nindid > 0 and /* make sure it is an index */\n(status2 & 2) = 2 and /* make sure declaritive constraint */\n(status & 2048) = 2048 /* make sure it is primary key */if @keycnt is null\nbegin\nreturn 1\nend\n/* keycnt contains #clustered key columns but it contains #keys + 1 */\n/* for non-clustered indexes. */\nif @indid > 1\nbegin\nselect @keycnt = @keycnt - 1\nend\nif @keycnt = 0\nbegin\nreturn 1\nendselect @keyname, @keycnt,\nindex_col(@objname, @indid, 1),\nindex_col(@objname, @indid, 2),\nindex_col(@objname, @indid, 3),\nindex_col(@objname, @indid, 4),\nindex_col(@objname, @indid, 5),\nindex_col(@objname, @indid, 6),\nindex_col(@objname, @indid, 7),\nindex_col(@objname, @indid, 8),\nindex_col(@objname, @indid, 9),\nindex_col(@objname, @indid, 10),\nindex_col(@objname, @indid, 11),\nindex_col(@objname, @indid, 12),\nindex_col(@objname, @indid, 13),\nindex_col(@objname, @indid, 14),\nindex_col(@objname, @indid, 15),\nindex_col(@objname, @indid, 16)\ngo\nIF OBJECT_ID('dbo.sp_pb60primarykey') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60primarykey >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60primarykey >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60primarykey TO public\ngoIF OBJECT_ID('dbo.sp_pb60procdesc') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60procdesc\nIF OBJECT_ID('dbo.sp_pb60procdesc') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60procdesc >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60procdesc >>>'\nEND\ngo\ncreate proc sp_pb60procdesc\n@procid int = null ,\n@procnumber smallint = null\nas\nselect name, type, length, colid, prec, scale from dbo.syscolumns\nwhere (id = @procid and number = @procnumber)\nreturn\ngo\nIF OBJECT_ID('dbo.sp_pb60procdesc') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60procdesc >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60procdesc >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60procdesc TO public\ngoIF OBJECT_ID('dbo.sp_pb60proclist') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60proclist\nIF OBJECT_ID('dbo.sp_pb60proclist') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60proclist >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60proclist >>>'\nEND\ngo\ncreate proc sp_pb60proclist\n@sysprocs int = 1\nas\ndeclare @currdb varchar(31) if @sysprocs = 0\nbegin\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 1\nfrom dbo.sysobjects o, dbo.syscomments c\nwhere o.type = 'P' and o.id = c.id and c.colid = 1 and c.colid2 = 0\norder by 2, 4, 5, 6\nend\nelse\nbegin\nselect @currdb = db_name(db_id())\nif @currdb = 'sybsystemprocs'\nbegin\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 1\nfrom dbo.sysobjects o, dbo.syscomments c\nwhere o.type = 'P' and o.id = c.id and c.colid = 1 and c.colid2 = 0\nunion\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 3\nfrom master.dbo.sysobjects o, master.dbo.syscomments c\nwhere o.type = 'P' and o.id = c.id and c.colid = 1 and c.colid2 = 0\nand substring(o.name, 1, 3) = 'sp_'\norder by 2, 4, 5, 6\nend\nelse\nif @currdb = 'master'\nbegin\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 1\nfrom dbo.sysobjects o, dbo.syscomments c\nwhere o.type = 'P' and o.id = c.id and c.colid = 1 and c.colid2 = 0\nunion\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 2\nfrom sybsystemprocs.dbo.sysobjects o,\nsybsystemprocs.dbo.syscomments c\nwhere o.type = 'P' and o.id = c.id and c.colid = 1 and c.colid2 = 0\nand substring(o.name, 1, 3) = 'sp_'\norder by 2, 4, 5, 6\nend\nelse\nbegin\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 1\nfrom dbo.sysobjects o, dbo.syscomments c\nwhere o.type = 'P' and o.id = c.id and c.colid = 1 and c.colid2 = 0\nunion\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 2\nfrom sybsystemprocs.dbo.sysobjects o,\nsybsystemprocs.dbo.syscomments c\nwhere o.type = 'P' and o.id = c.id and c.colid = 1 and c.colid2 = 0\nand substring(o.name, 1, 3) = 'sp_'\nunion\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 3\nfrom master.dbo.sysobjects o, master.dbo.syscomments c\nwhere o.type = 'P' and o.id = c.id and c.colid = 1 and c.colid2 = 0\nand substring(o.name, 1, 3) = 'sp_'\norder by 2, 4, 5, 6\nend\nend\nreturn\ngo\nIF OBJECT_ID('dbo.sp_pb60proclist') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60proclist >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60proclist >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60proclist TO public\ngoIF OBJECT_ID('dbo.sp_pb60table') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb60table\nIF OBJECT_ID('dbo.sp_pb60table') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb60table >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb60table >>>'\nEND\ngo\ncreate procedure sp_pb60table\n@table_name varchar(32) = null,\n@table_owner varchar(32) = null,\n@table_qualifier varchar(32) = null,\n@table_type varchar(100) = null\nas\ndeclare @type1 varchar(3)if @table_type is null\nbegin\n/* Select all ODBC supported data types */\nselect @type1 = 'SUV'\nend\nelse\nbegin\n/* TableType is case sensitive if CS server */\nselect @type1 = null\n/* Add System Tables */\nif (charindex(\"'SYSTEM TABLE'\", @table_type) != 0)\nselect @type1 = @type1 + 'S'\n/* Add User Tables */\nif (charindex (\"'TABLE'\", @table_type) != 0)\nselect @type1 = @type1 + 'U'\n/* Add Views */\nif (charindex (\"'VIEW'\", @table_type) != 0)\nselect @type1 = @type1 + 'V'\nendif @table_name is null\nbegin\n/* If table name not supplied, match all */\nselect @table_name = '%'\nend\nelse\nbegin\nif (@table_owner is null) and (charindex('%', @table_name) = 0)\nbegin\n/* If owner not specified and table is specified */\nif exists (select * from sysobjects where uid = user_id() and\nname = @table_name and (type = 'U' or type = 'V' or type = 'S'))\nbegin\n/* Override supplied owner w/owner of table */\nselect @table_owner = user_name()\nend\nend\nend\n/* If no owner supplied, force wildcard */\nif @table_owner is null\nselect @table_owner = '%' select o.name, o.id, o.type, o.uid, user_name(o.uid)\nfrom sysobjects o\nwhere o.name like @table_name\nand user_name(o.uid) like @table_owner\nand charindex(substring(o.type,1,1),@type1) != 0\ngo\nIF OBJECT_ID('dbo.sp_pb60table') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb60table >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb60table >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb60table TO public\ngoIF OBJECT_ID('dbo.sp_pb80column') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80column\nIF OBJECT_ID('dbo.sp_pb80column') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80column >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80column >>>'\nEND\ngo\n/*------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80column lists the columns in a table. */\n/* The objectid is required as arg1. */\n/*------------------------------------------------*/\ncreate proc sp_pb80column\n@id intas\ndeclare @text varchar(255)\nselect @text = null\nselect c.colid, c.status, c.type, c.length, c.name, c.usertype,\nc.prec, c.scale, @text\nfrom dbo.syscolumns c where c.id = @id and c.cdefault = 0\nunion select\nc.colid, c.status, c.type, c.length, c.name, c.usertype,\nc.prec, c.scale, m.text\nfrom dbo.syscolumns c, dbo.syscomments m where c.id = @id\nand c.cdefault = m.id and m.colid = 1\norder by 1\ngo\nIF OBJECT_ID('dbo.sp_pb80column') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80column >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80column >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80column TO public\ngoIF OBJECT_ID('dbo.sp_pb80db') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80db\nIF OBJECT_ID('dbo.sp_pb80db') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80db >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80db >>>'\nEND\ngo\n/*-----------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80db retrieves the names of all databases */\n/* available for this server. */\n/*-----------------------------------------------------*/\ncreate proc sp_pb80db as\nselect name from master.dbo.sysdatabases\ngo\nIF OBJECT_ID('dbo.sp_pb80db') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80db >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80db >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80db TO public\ngoIF OBJECT_ID('dbo.sp_pb80extcat') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80extcat\nIF OBJECT_ID('dbo.sp_pb80extcat') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80extcat >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80extcat >>>'\nEND\ngo\n/*-------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80extcat checks the status of PB Catalog. */\n/* Returns cExists[10] with Y/N values. */\n/*-------------------------------------------------*/\ncreate procedure sp_pb80extcat\nas\ndeclare @tbl char(1)\ndeclare @col char(1)\ndeclare @fmt char(1)\ndeclare @vld char(1)\ndeclare @edt char(1)\ndeclare @tblproc char(1)\ndeclare @colproc char(1)\ndeclare @fmtproc char(1)\ndeclare @vldproc char(1)\ndeclare @edtproc char(1)\ndeclare @existbuff char(10)\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pbcattbl'))\nselect @tbl = 'Y'\nelse\nselect @tbl = 'N'\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pbcatcol'))\nselect @col = 'Y'\nelse\nselect @col = 'N'\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pbcatfmt'))\nselect @fmt = 'Y'\nelse\nselect @fmt = 'N'\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pbcatvld'))\nselect @vld = 'Y'\nelse\nselect @vld = 'N'\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pbcatedt'))\nselect @edt = 'Y'\nelse\nselect @edt = 'N'\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pb_cattbl'))\nselect @tblproc = 'Y'\nelse\nselect @tblproc = 'N'\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pb_catcol'))\nselect @colproc = 'Y'\nelse\nselect @colproc = 'N'\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pb_catfmt'))\nselect @fmtproc = 'Y'\nelse\nselect @fmtproc = 'N'\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pb_catvld'))\nselect @vldproc = 'Y'\nelse\nselect @vldproc = 'N'\nif exists\n(select id from dbo.sysobjects where\nid = object_id('dbo.pb_catedt'))\nselect @edtproc = 'Y'\nelse\nselect @edtproc = 'N'\nselect @existbuff = @tbl + @col + @fmt + @vld + @edt +\n@tblproc + @colproc + @fmtproc +\n@vldproc + @edtproc\nselect @existbuff\ngo\nIF OBJECT_ID('dbo.sp_pb80extcat') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80extcat >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80extcat >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80extcat TO public\ngoIF OBJECT_ID('dbo.sp_pb80fktable') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80fktable\nIF OBJECT_ID('dbo.sp_pb80fktable') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80fktable >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80fktable >>>'\nEND\ngo\n/*--------------------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80fktable lists the tables that reference this table. */\n/*--------------------------------------------------------------*/\ncreate procedure sp_pb80fktable\n@objname varchar(61) = null\nas\ndeclare @objid int\ndeclare @isolevel int /* ptrack 325579 isolation level */if (@objname is null)\nreturn (1)select @objid = object_id(@objname)\n/* ptrack 325579 override isolation level 0 default */\nselect @isolevel = @@isolation\nif @isolevel = 0\nbegin\nset transaction isolation level 1\nendselect o.name, o.id, o.type, o.uid, user_name(o.uid)\nfrom dbo.sysobjects o, dbo.sysreferences r\nwhere r.reftabid = @objid and\nr.tableid = o.idif @isolevel = 0\nbegin\nset transaction isolation level 0\nend\ngo\nIF OBJECT_ID('dbo.sp_pb80fktable') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80fktable >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80fktable >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80fktable TO public\ngoIF OBJECT_ID('dbo.sp_pb80foreignkey') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80foreignkey\nIF OBJECT_ID('dbo.sp_pb80foreignkey') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80foreignkey >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80foreignkey >>>'\nEND\ngo\n/*-----------------------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80foreignkey lists all foreign keys associated with */\n/* a table whose name is passed as arg1 (required). */\n/*-----------------------------------------------------------------*/\ncreate proc sp_pb80foreignkey\n@objname varchar(92)\nas\ndeclare @objid int /* the object id of the fk table */\ndeclare @keyname varchar(30) /* name of foreign key */\ndeclare @constid int /* the constraint id in sysconstraints */\ndeclare @keycnt smallint /* number of columns in pk */\ndeclare @stat int\ndeclare @isolevel int /* ptrack 325579 isolation level */select @objid = object_id(@objname)\nif (@objid is null)\nbegin\nreturn (1)\nend\nselect @stat = sysstat2\nfrom dbo.sysobjects\nwhere id = @objid and\n(sysstat2 & 2) = 2\nif (@stat is null)\nbegin\nreturn (1)\nend/* Now I know this table has one or more foreign keys. */\n/* ptrack 325579 override isolation level 0 default */\nselect @isolevel = @@isolation\nif @isolevel = 0\nbegin\nset transaction isolation level 1\nendselect o1.name, r.keycnt, o2.name, user_name(o2.uid),\nr.fokey1, r.fokey2, r.fokey3, r.fokey4, r.fokey5, r.fokey6,\nr.fokey7, r.fokey8, r.fokey9, r.fokey10, r.fokey11, r.fokey12,\nr.fokey13, r.fokey14, r.fokey15, r.fokey16\nfrom dbo.sysconstraints c, dbo.sysobjects o1,\ndbo.sysreferences r, dbo.sysobjects o2\nwhere c.tableid = @objid and\nc.status = 64 and\nc.constrid = o1.id and\no1.type = 'RI' and\nc.constrid = r.constrid and\nr.reftabid = o2.idif @isolevel = 0\nbegin\nset transaction isolation level 0\nend\ngo\nIF OBJECT_ID('dbo.sp_pb80foreignkey') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80foreignkey >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80foreignkey >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80foreignkey TO public\ngoIF OBJECT_ID('dbo.sp_pb80index') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80index\nIF OBJECT_ID('dbo.sp_pb80index') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80index >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80index >>>'\nEND\ngo\n/*-----------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80index retrieves info about all indexes for */\n/* a specific table (@objname is required). */\n/*-----------------------------------------------------*/\ncreate procedure sp_pb80index\n@objname varchar(92) /* the table to check for indexes */\nas\ndeclare @objid int /* the object id of the table */\ndeclare @indid int /* the index id of an index */\ndeclare @key1 varchar(30) /* first key */\ndeclare @key2 varchar(30) /* second key */\ndeclare @key3 varchar(30) /* third key */\ndeclare @key4 varchar(30) /* fourth key */\ndeclare @key5 varchar(30) /* ... */\ndeclare @key6 varchar(30)\ndeclare @key7 varchar(30)\ndeclare @key8 varchar(30)\ndeclare @key9 varchar(30) /* ... */\ndeclare @key10 varchar(30)\ndeclare @key11 varchar(30)\ndeclare @key12 varchar(30)\ndeclare @key13 varchar(30) /* ... */\ndeclare @key14 varchar(30)\ndeclare @key15 varchar(30)\ndeclare @key16 varchar(30)declare @unique smallint /* index is unique */\ndeclare @clustered smallint /* index is clustered */\ndeclare @isolevel int /* ptrack 325579 isolation level */\n/*\n** Check to see the the table exists and initialize @objid.\n*/\nselect @objid = object_id(@objname)/*\n** Table doesn't exist so return.\n*/\nif @objid is null\nbegin\nreturn\nend/*\n** See if the object has any indexes.\n** Since there may be more than one entry in sysindexes for the object,\n** this select will set @indid to the index id of the first index.\n*/\nselect @indid = min(indid)\nfrom dbo.sysindexes\nwhere id = @objid\nand indid > 0\nand indid < 255/*\n** If no indexes, return.\n*/\nif @indid is null\nbegin\nreturn\nend/* ptrack 325579 override isolation level 0 default */\nselect @isolevel = @@isolation\nif @isolevel = 0\nbegin\nset transaction isolation level 1\nend/*\n** Now check out each index, figure out it's type and keys and\n** save the info in a temporary table that we'll print out at the end.\n*/\ncreate table #spindtab\n(\nindex_name varchar(30),\nindex_num int,\nindex_key1 varchar(30) null,\nindex_key2 varchar(30) null,\nindex_key3 varchar(30) null,\nindex_key4 varchar(30) null,\nindex_key5 varchar(30) null,\nindex_key6 varchar(30) null,\nindex_key7 varchar(30) null,\nindex_key8 varchar(30) null,\nindex_key9 varchar(30) null,\nindex_key10 varchar(30) null,\nindex_key11 varchar(30) null,\nindex_key12 varchar(30) null,\nindex_key13 varchar(30) null,\nindex_key14 varchar(30) null,\nindex_key15 varchar(30) null,\nindex_key16 varchar(30) null,\nindex_unique smallint,\nindex_clustered smallint,\nindex_status smallint,\nindex_status2 int\n)while @indid != null\nbegin /*\n** First we'll figure out what the keys are.\n*/\ndeclare @i int\ndeclare @thiskey varchar(30)\ndeclare @lastindid int select @i = 1 set nocount on while @i <= 16\nbegin\nselect @thiskey = index_col(@objname, @indid, @i) if @thiskey = null\nbegin\ngoto keysdone\nend if @i = 1\nbegin\nselect @key1 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 2\nbegin\nselect @key2 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 3\nbegin\nselect @key3 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 4\nbegin\nselect @key4 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 5\nbegin\nselect @key5 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 6\nbegin\nselect @key6 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 7\nbegin\nselect @key7 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 8\nbegin\nselect @key8 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 9\nbegin\nselect @key9 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 10\nbegin\nselect @key10 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 11\nbegin\nselect @key11 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 12\nbegin\nselect @key12 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 13\nbegin\nselect @key13 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 14\nbegin\nselect @key14 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 15\nbegin\nselect @key15 = index_col(@objname, @indid, @i)\nend\nelse\nif @i = 16\nbegin\nselect @key16 = index_col(@objname, @indid, @i)\nend /*\n** Increment @i so it will check for the next key.\n*/\nselect @i = @i + 1 end /*\n** When we get here we now have all the keys.\n*/\nkeysdone:\nset nocount off /*\n** Figure out if it's a clustered or nonclustered index.\n*/\nif @indid = 1\nselect @clustered = 1 if @indid > 1\nselect @clustered = 0 /*\n** Now we'll check out the status bits for this index\n*/ /*\n** See if the index is unique (0x02).\n*/\nif exists (select *\nfrom master.dbo.spt_values v, dbo.sysindexes i\nwhere i.status & v.number = v.number\nand v.type = 'I'\nand v.number = 2\nand i.id = @objid\nand i.indid = @indid)\nselect @unique = 1\nelse\nselect @unique = 0 /*\n** Now we have all the needed info for the index so we'll add\n** the goods to the temporary table.\n*/\ninsert into #spindtab\nselect name, @i - 1, @key1, @key2, @key3, @key4,\n@key5, @key6, @key7, @key8, @key9,\n@key10, @key11, @key12, @key13, @key14,\n@key15, @key16, @unique, @clustered, status, status2\nfrom dbo.sysindexes\nwhere id = @objid\nand indid = @indid\n/*\n** Now move @indid to the next index.\n*/\nselect @lastindid = @indid\nselect @indid = null\nselect @indid = min(indid)\nfrom dbo.sysindexes\nwhere id = @objid\nand indid > @lastindid\nand indid < 255\nend/*\n** Now print out the contents of the temporary index table.\n*/\nselect index_name, index_num, index_key1, index_key2,\nindex_key3, index_key4, index_key5, index_key6,\nindex_key7, index_key8, index_key9, index_key10,\nindex_key11, index_key12, index_key13, index_key14,\nindex_key15, index_key16, index_unique, index_clustered,\nindex_status, index_status2\nfrom #spindtabdrop table #spindtab\n/* ptrack 325579 reset isolation 0 after we're done with procedure */\nif @isolevel = 0\nbegin\nset transaction isolation level 0\nend\ngo\nIF OBJECT_ID('dbo.sp_pb80index') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80index >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80index >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80index TO public\ngoIF OBJECT_ID('dbo.sp_pb80pkcheck') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80pkcheck\nIF OBJECT_ID('dbo.sp_pb80pkcheck') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80pkcheck >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80pkcheck >>>'\nEND\ngo\n/*----------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80pkcheck determines whether or not a table */\n/* has a Primary Key. Table name is a required arg. */\n/*----------------------------------------------------*/\ncreate procedure sp_pb80pkcheck\n@objname varchar(92)\nas\ndeclare @stat int\nselect @stat = sysstat2\nfrom dbo.sysobjects\nwhere id = object_id(@objname) and\n(sysstat2 & 8) = 8\nif (@stat is null)\nbegin\nreturn (0)\nend\nelse\nbegin\nreturn (1)\nend\ngo\nIF OBJECT_ID('dbo.sp_pb80pkcheck') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80pkcheck >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80pkcheck >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80pkcheck TO public\ngoIF OBJECT_ID('dbo.sp_pb80primarykey') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80primarykey\nIF OBJECT_ID('dbo.sp_pb80primarykey') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80primarykey >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80primarykey >>>'\nEND\ngo\n/*------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80primarykey lists the columns that */\n/* comprise the primary key for a table. The */\n/* table name is required as arg1. */\n/*------------------------------------------------*/\ncreate proc sp_pb80primarykey\n@objname varchar(92)\nas\ndeclare @objid int /* the object id of the table */\ndeclare @keyname varchar(30) /* name of primary key */\ndeclare @indid int /* the index id of the index */\ndeclare @keycnt smallint /* number of columns in pk */select @objid = object_id(@objname)\nif @objid is null\nbegin\nreturn 1\nendselect @keyname = name,\n@indid = indid,\n@keycnt = keycnt\nfrom dbo.sysindexes\nwhere id = object_id(@objname) and\nindid > 0 and /* make sure it is an index */\n(status2 & 2) = 2 and /* make sure declaritive constraint */\n(status & 2048) = 2048 /* make sure it is primary key */if @keycnt is null\nbegin\nreturn 1\nend\n/* keycnt contains #clustered key columns but it contains #keys + 1 */\n/* for non-clustered indexes. */\nif @indid > 1\nbegin\nselect @keycnt = @keycnt - 1\nend\nif @keycnt = 0\nbegin\nreturn 1\nendselect @keyname, @keycnt,\nindex_col(@objname, @indid, 1),\nindex_col(@objname, @indid, 2),\nindex_col(@objname, @indid, 3),\nindex_col(@objname, @indid, 4),\nindex_col(@objname, @indid, 5),\nindex_col(@objname, @indid, 6),\nindex_col(@objname, @indid, 7),\nindex_col(@objname, @indid, 8),\nindex_col(@objname, @indid, 9),\nindex_col(@objname, @indid, 10),\nindex_col(@objname, @indid, 11),\nindex_col(@objname, @indid, 12),\nindex_col(@objname, @indid, 13),\nindex_col(@objname, @indid, 14),\nindex_col(@objname, @indid, 15),\nindex_col(@objname, @indid, 16)\ngo\nIF OBJECT_ID('dbo.sp_pb80primarykey') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80primarykey >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80primarykey >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80primarykey TO public\ngoIF OBJECT_ID('dbo.sp_pb80procdesc') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80procdesc\nIF OBJECT_ID('dbo.sp_pb80procdesc') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80procdesc >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80procdesc >>>'\nEND\ngo\n/*------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80procdesc gets a description of the arg */\n/* list for a given stored procedure. */\n/*------------------------------------------------*/\ncreate proc sp_pb80procdesc\n@procid int = null ,\n@procnumber smallint = null\nas\nselect name, type, length, colid, prec, scale from dbo.syscolumns\nwhere (id = @procid and number = @procnumber)\nreturn\ngo\nIF OBJECT_ID('dbo.sp_pb80procdesc') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80procdesc >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80procdesc >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80procdesc TO public\ngoIF OBJECT_ID('dbo.sp_pb80proclist') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80proclist\nIF OBJECT_ID('dbo.sp_pb80proclist') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80proclist >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80proclist >>>'\nEND\ngo\n/*------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80proclist lists available stored procs */\n/* Enhanced to support SystemProcs='NO' DBParm. */\n/* */\n/* In order to support extended stored procs in */\n/* ASE V11.5, check for xp added. */\n/*------------------------------------------------*/\ncreate proc sp_pb80proclist\n@sysprocs int = 1\nas\ndeclare @currdb varchar(31) if @sysprocs = 0\nbegin\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 1\nfrom dbo.sysobjects o, dbo.syscomments c\nwhere (o.type = 'P' or o.type = 'XP') and o.id = c.id and c.colid = 1 and c.colid2 = 0\norder by 2, 4, 5, 6\nend\nelse\nbegin\nselect @currdb = db_name(db_id())\nif @currdb = 'sybsystemprocs'\nbegin\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 1\nfrom dbo.sysobjects o, dbo.syscomments c\nwhere (o.type = 'P' or o.type = 'XP') and o.id = c.id and c.colid = 1 and c.colid2 = 0\nunion\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 3\nfrom master.dbo.sysobjects o, master.dbo.syscomments c\nwhere (o.type = 'P' or o.type = 'XP') and o.id = c.id and c.colid = 1 and c.colid2 = 0\nand (substring(o.name, 1, 3) = 'sp_' or\nsubstring(o.name, 1, 3) = 'xp_')\norder by 2, 4, 5, 6\nend\nelse\nif @currdb = 'master'\nbegin\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 1\nfrom dbo.sysobjects o, dbo.syscomments c\nwhere (o.type = 'P' or o.type = 'XP') and o.id = c.id and c.colid = 1 and c.colid2 = 0\nunion\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 2\nfrom sybsystemprocs.dbo.sysobjects o,\nsybsystemprocs.dbo.syscomments c\nwhere (o.type = 'P' or o.type = 'XP') and o.id = c.id and c.colid = 1 and c.colid2 = 0\nand (substring(o.name, 1, 3) = 'sp_' or\nsubstring(o.name, 1, 3) = 'xp_')\norder by 2, 4, 5, 6\nend\nelse\nbegin\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 1\nfrom dbo.sysobjects o, dbo.syscomments c\nwhere (o.type = 'P' or o.type = 'XP') and o.id = c.id and c.colid = 1 and c.colid2 = 0\nunion\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 2\nfrom sybsystemprocs.dbo.sysobjects o,\nsybsystemprocs.dbo.syscomments c\nwhere (o.type = 'P' or o.type = 'XP') and o.id = c.id and c.colid = 1 and c.colid2 = 0\nand (substring(o.name, 1, 3) = 'sp_' or\nsubstring(o.name, 1, 3) = 'xp_')\nunion\nselect o.id, o.name, o.uid, user_name(o.uid), c.number, 3\nfrom master.dbo.sysobjects o, master.dbo.syscomments c\nwhere (o.type = 'P' or o.type = 'XP') and o.id = c.id and c.colid = 1 and c.colid2 = 0\nand (substring(o.name, 1, 3) = 'sp_' or\nsubstring(o.name, 1, 3) = 'xp_')\norder by 2, 4, 5, 6\nend\nend\nreturn\ngo\nIF OBJECT_ID('dbo.sp_pb80proclist') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80proclist >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80proclist >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80proclist TO public\ngoIF OBJECT_ID('dbo.sp_pb80table') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80table\nIF OBJECT_ID('dbo.sp_pb80table') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80table >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80table >>>'\nEND\ngo\n/*---------------------------------------------------------*/\n/* This version of sp_pb80table displays all tables, */\n/* including those for which the current user has no */\n/* permissions. */\n/* An alternate version of this procedure exists in */\n/* pbsyc2.sql which restricts the table list for security */\n/* reasons. */\n/* It is up to the DBA at your site to decide which */\n/* version of sp_pb80table should be implemented. */\n/*---------------------------------------------------------*/\ncreate procedure sp_pb80table\n@table_name varchar(32) = null,\n@table_owner varchar(32) = null,\n@table_qualifier varchar(32) = null,\n@table_type varchar(100) = null\nas\ndeclare @type1 varchar(3)if @table_type is null\nbegin\n/* Select all ODBC supported data types */\nselect @type1 = 'SUV'\nend\nelse\nbegin\n/* TableType is case sensitive if CS server */\nselect @type1 = null\n/* Add System Tables */\nif (charindex(\"'SYSTEM TABLE'\", @table_type) != 0)\nselect @type1 = @type1 + 'S'\n/* Add User Tables */\nif (charindex (\"'TABLE'\", @table_type) != 0)\nselect @type1 = @type1 + 'U'\n/* Add Views */\nif (charindex (\"'VIEW'\", @table_type) != 0)\nselect @type1 = @type1 + 'V'\nendif @table_name is null\nbegin\n/* If table name not supplied, match all */\nselect @table_name = '%'\nend\nelse\nbegin\nif (@table_owner is null) and (charindex('%', @table_name) = 0)\nbegin\n/* If owner not specified and table is specified */\nif exists (select * from sysobjects where uid = user_id() and\nname = @table_name and (type = 'U' or type = 'V' or type = 'S'))\nbegin\n/* Override supplied owner w/owner of table */\nselect @table_owner = user_name()\nend\nend\nend\n/* If no owner supplied, force wildcard */\nif @table_owner is null\nselect @table_owner = '%' select o.name, o.id, o.type, o.uid, user_name(o.uid)\nfrom sysobjects o\nwhere o.name like @table_name\nand user_name(o.uid) like @table_owner\nand charindex(substring(o.type,1,1),@type1) != 0\ngo\nIF OBJECT_ID('dbo.sp_pb80table') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80table >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80table >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80table TO public\ngoIF OBJECT_ID('dbo.sp_pb80text') IS NOT NULL\nBEGIN\nDROP PROCEDURE dbo.sp_pb80text\nIF OBJECT_ID('dbo.sp_pb80text') IS NOT NULL\nPRINT '<<< FAILED DROPPING PROCEDURE dbo.sp_pb80text >>>'\nELSE\nPRINT '<<< DROPPED PROCEDURE dbo.sp_pb80text >>>'\nEND\ngo\n/*-----------------------------------------------------*/\n/* PowerBuilder Client Library Interface */\n/* sp_pb80text retrieves the text of a stored */\n/* procedure from the syscomments table. requires */\n/* and @objid argument and an optional @number arg */\n/*-----------------------------------------------------*/\ncreate procedure sp_pb80text\n@objid int ,\n@number smallint = null,\n@db smallint\nas\nif (@number = null)\nselect text from dbo.syscomments where id = @objid\nelse\nbegin\nif @db = 1\nbegin\nselect text from dbo.syscomments where\n(id = @objid and number = @number)\nend\nelse\nif @db = 2\nbegin\nselect text from sybsystemprocs.dbo.syscomments where\n(id = @objid and number = @number)\nend\nelse\nif @db = 3\nbegin\nselect text from master.dbo.syscomments where\n(id = @objid and number = @number)\nend\nend\nreturn\ngo\nIF OBJECT_ID('dbo.sp_pb80text') IS NOT NULL\nPRINT '<<< CREATED PROCEDURE dbo.sp_pb80text >>>'\nELSE\nPRINT '<<< FAILED CREATING PROCEDURE dbo.sp_pb80text >>>'\ngo\nGRANT EXECUTE ON dbo.sp_pb80text TO public\ngo\n\n\nПримочка для PowerBuilder 6.5.1\nЧтобы созданные вами программы на PowerBuilder 6.5.1 были похожи на современные под WinXP & Vista интерфейс (закругленные углы у кнопок и т.п.) нужно создать текстовый файлик с именем: иемя_вашей_программы.exe.manifest и положить его в директорию, где лежит ваш EXE файл, а внутрь вложить вот этот текст:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">\n<assemblyIdentity\nversion=\"1.0.0.0\"\nprocessorArchitecture=\"X86\"\nname=\"gic.gic\"\ntype=\"win32\"\n/>\n<description>gic</description>\n<dependency>\n<dependentAssembly>\n<assemblyIdentity\ntype=\"win32\"\nname=\"Microsoft.Windows.Common-Controls\"\nversion=\"6.0.0.0\"\nprocessorArchitecture=\"X86\"\npublicKeyToken=\"6595b64144ccf1df\"\nlanguage=\"*\"\n/>\n</dependentAssembly>\n</dependency>\n</assembly>Например, чтобы PowerBuilder 6.5.1 был немного красивее, кнопочки стали с закругленными углами, по умолчанию он запускается из директории C:\\Sybase\\PB6\\pb60.exe, то ваш файл будет называться C:\\Sybase\\PB6\\pb60.exe.manifest\n  \n Набор в группу «Хранители» - Помогите сохранить редкие раздачи  ","magnet_link":"magnet:?xt=urn:btih:A772AAF7BA3E142794E5C910266C9D2D5974589E&tr=http%3A%2F%2Fbt.t-ru.org%2Fann%3Fmagnet&dn=Sybase%20ASE%2012.5.1%20(Server%20%2B%20Client%20%2B%20Docs%20%2B%20Instrument)%20%5B%D0%A1%D0%A3%D0%91%D0%94%5D","torrent_link":"dl.php?t=1152215","thanked_list":[{"id":"6622696","name":"tstalker ","data":"(14-Сен-22)"},{"id":"825090","name":"Stahl-reich ","data":"(01-Июн-22)"},{"id":"37811469","name":"kkmindaugas ","data":"(10-Май-22)"},{"id":"39745239","name":"Gr35Hn1K ","data":"(22-Апр-21)"},{"id":"29864192","name":"lerwa ","data":"(08-Апр-21)"},{"id":"26655781","name":"movntq ","data":"(07-Сен-19)"},{"id":"20348142","name":"монгольер ","data":"(10-Авг-19)"},{"id":"15043214","name":"McLN ","data":"(06-Май-19)"},{"id":"25410224","name":"isdenno ","data":"(09-Апр-19)"},{"id":"32504872","name":"lockyfc ","data":"(31-Янв-19)"},{"id":"43413569","name":"Masoti ","data":"(30-Июл-18)"},{"id":"20565874","name":"andtut ","data":"(26-Июн-18)"},{"id":"26244360","name":"pahomyc ","data":"(05-Янв-18)"},{"id":"40382408","name":"cybercyborg ","data":"(06-Май-16)"},{"id":"10951313","name":"Def3008 ","data":"(23-Мар-16)"},{"id":"36623643","name":"KaifasKain ","data":"(28-Фев-15)"},{"id":"17559705","name":"morpheus.tut ","data":"(23-Фев-15)"},{"id":"32284302","name":"yiyux ","data":"(12-Дек-14)"},{"id":"0","name":"Гость","data":"(02-Окт-14)"},{"id":"36380927","name":"piranah ","data":"(28-Июл-14)"},{"id":"17863052","name":"SoftTest ","data":"(18-Май-14)"},{"id":"0","name":"Гость","data":"(30-Дек-13)"},{"id":"23482528","name":"chenko55 ","data":"(22-Дек-13)"},{"id":"0","name":"Гость","data":"(30-Окт-13)"},{"id":"24704915","name":"shef_xxx06 ","data":"(06-Окт-13)"},{"id":"1853660","name":"teslathomas ","data":"(04-Окт-13)"},{"id":"13809752","name":"Djony2 ","data":"(30-Июл-13)"},{"id":"13290791","name":"vrvz ","data":"(25-Июл-13)"},{"id":"14838025","name":"kalashnikovi ","data":"(26-Июн-13)"},{"id":"22817165","name":"dn010885maa ","data":"(14-Июн-13)"},{"id":"18393930","name":"alexander180 ","data":"(28-Фев-13)"},{"id":"13407794","name":"antchudinov ","data":"(24-Фев-13)"},{"id":"26434303","name":"4fly ","data":"(08-Янв-13)"},{"id":"0","name":"Гость","data":"(06-Дек-12)"},{"id":"13426941","name":"trombino ","data":"(02-Дек-12)"},{"id":"21357278","name":"Samarskiy1988Gekazzzzppzp ","data":"(17-Апр-12)"},{"id":"21794627","name":"163_ ","data":"(31-Янв-12)"},{"id":"0","name":"Гость","data":"(18-Янв-12)"},{"id":"3235044","name":"login2tru ","data":"(18-Дек-11)"},{"id":"0","name":"Гость","data":"(22-Ноя-11)"},{"id":"16863615","name":"GVA_Guns ","data":"(09-Ноя-11)"},{"id":"0","name":"Гость","data":"(01-Сен-11)"},{"id":"15906398","name":"ser_po ","data":"(12-Авг-11)"},{"id":"17582023","name":"JacobP ","data":"(19-Июн-11)"},{"id":"9368622","name":"CyberManiac ","data":"(31-Май-11)"},{"id":"1759778","name":"kharshakh ","data":"(11-Дек-10)"},{"id":"15912825","name":"Yetch ","data":"(24-Ноя-10)"},{"id":"0","name":"Гость","data":"(28-Окт-10)"},{"id":"5496902","name":"5132095 ","data":"(26-Окт-10)"},{"id":"0","name":"Гость","data":"(26-Янв-10)"},{"id":"0","name":"Гость","data":"(27-Ноя-09)"},{"id":"0","name":"Гость","data":"(09-Июл-09)"},{"id":"0","name":"Гость","data":"(03-Июн-09)"},{"id":"0","name":"Гость","data":"(27-Май-09)"},{"id":"0","name":"Гость","data":"(25-Апр-09)"}]}